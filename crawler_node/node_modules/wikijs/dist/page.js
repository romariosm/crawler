'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = wikiPage;

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _util = require('./util');

var _determiners = require('./determiners');

var _determiners2 = _interopRequireDefault(_determiners);

var _wikiInfoboxParserCore = require('wiki-infobox-parser-core');

var _wikiInfoboxParserCore2 = _interopRequireDefault(_wikiInfoboxParserCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function markupParser(data) {
	return new Promise(function (resolve, reject) {
		(0, _wikiInfoboxParserCore2.default)(data, function (err, resultString) {
			if (err) {
				reject(err);
			} else {
				resolve(JSON.parse(resultString));
			}
		});
	});
}

/**
 * WikiPage
 * @namespace WikiPage
 */
function wikiPage(rawPageInfo, apiOptions) {

	var raw = rawPageInfo;

	/**
  * HTML from page
  * @example
  * wiki.page('batman').then(page => page.html()).then(console.log);
  * @method WikiPage#html
  * @return {Promise}
  */
	function html() {
		return (0, _util.api)(apiOptions, {
			prop: 'revisions',
			rvprop: 'content',
			rvlimit: 1,
			rvparse: '',
			titles: raw.title
		}).then(function (res) {
			return res.query.pages[raw.pageid].revisions[0]['*'];
		});
	}

	/**
  * Text content from page
  * @example
  * wiki.page('batman').then(page => page.content()).then(console.log);
  * @method WikiPage#content
  * @return {Promise}
  */
	function content() {
		return (0, _util.api)(apiOptions, {
			prop: 'extracts',
			explaintext: '',
			titles: raw.title
		}).then(function (res) {
			return res.query.pages[raw.pageid].extract;
		});
	}

	/**
  * Text summary from page
  * @example
  * wiki.page('batman').then(page => page.summary()).then(console.log);
  * @method WikiPage#summary
  * @return {Promise}
  */
	function summary() {
		return (0, _util.api)(apiOptions, {
			prop: 'extracts',
			explaintext: '',
			exintro: '',
			titles: raw.title
		}).then(function (res) {
			return res.query.pages[raw.pageid].extract;
		});
	}

	/**
  * Raw data from images from page
  * @example
  * wiki.page('batman').then(page => page.rawImages()).then(console.log);
  * @method WikiPage#rawImages
  * @return {Promise}
  */
	function rawImages() {
		return (0, _util.api)(apiOptions, {
			generator: 'images',
			gimlimit: 'max',
			prop: 'imageinfo',
			iiprop: 'url',
			titles: raw.title
		}).then(function (res) {
			if (res.query) {
				return _underscore2.default.values(res.query.pages);
			}
			return [];
		});
	}

	/**
  * Main image URL from infobox on page
  * @example
  * wiki.page('batman').then(page => page.mainImage()).then(console.log);
  * @method WikiPage#mainImage
  * @return {Promise}
  */
	function mainImage() {
		return Promise.all([rawImages(), info()]).then(function (_ref) {
			var _ref2 = _slicedToArray(_ref, 2);

			var images = _ref2[0];
			var info = _ref2[1];

			var image = images.find(function (image) {
				return image.title === 'File:' + info.image;
			});
			return image.imageinfo.length > 0 ? image.imageinfo[0].url : undefined;
		});
	}

	/**
  * Image URL's from page
  * @example
  * wiki.page('batman').then(page => page.image()).then(console.log);
  * @method WikiPage#images
  * @return {Promise}
  */
	function images() {
		return rawImages().then(function (images) {
			return _underscore2.default.chain(images).pluck('imageinfo').flatten().pluck('url').value();
		});
	}

	/**
  * References from page
  * @example
  * wiki.page('batman').then(page => page.references()).then(console.log);
  * @method WikiPage#references
  * @return {Promise}
  */
	function references() {
		return (0, _util.api)(apiOptions, {
			prop: 'extlinks',
			ellimit: 'max',
			titles: raw.title
		}).then(function (res) {
			return _underscore2.default.pluck(res.query.pages[raw.pageid].extlinks, '*');
		});
	}

	/**
  * Paginated links from page
  * @example
  * wiki.page('batman').then(page => page.links()).then(console.log);
  * @method WikiPage#links
  * @param  {Boolean} [aggregated] - return all links (default is true)
  * @param  {Number} [limit] - number of links per page
  * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]
  */
	function links() {
		var aggregated = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
		var limit = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];

		var _pagination = (0, _util.pagination)(apiOptions, {
			prop: 'links',
			plnamespace: 0,
			pllimit: limit,
			titles: raw.title
		}, function (res) {
			return _underscore2.default.pluck(res.query.pages[raw.pageid].links, 'title');
		});
		if (aggregated) {
			return (0, _util.aggregatePagination)(_pagination);
		}
		return _pagination;
	}

	/**
  * Paginated categories from page
  * @example
  * wiki.page('batman').then(page => page.categories()).then(console.log);
  * @method WikiPage#categories
  * @param  {Boolean} [aggregated] - return all categories (default is true)
  * @param  {Number} [limit] - number of categories per page
  * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]
  */
	function categories() {
		var aggregated = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
		var limit = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];

		var _pagination = (0, _util.pagination)(apiOptions, {
			prop: 'categories',
			pllimit: limit,
			titles: raw.title
		}, function (res) {
			return _underscore2.default.pluck(res.query.pages[raw.pageid].categories, 'title');
		});
		if (aggregated) {
			return (0, _util.aggregatePagination)(_pagination);
		}
		return _pagination;
	}

	/**
  * Geographical coordinates from page
  * @example
  * wiki().page('Texas').then(texas => texas.coordinates())
  * @method WikiPage#coordinates
  * @return {Promise}
  */
	function coordinates() {
		return (0, _util.api)(apiOptions, {
			prop: 'coordinates',
			titles: raw.title
		}).then(function (res) {
			return res.query.pages[raw.pageid].coordinates[0];
		});
	}

	/**
  * Get information from page
  * @example
  * new Wiki().page('Batman').then(page => page.info('alter_ego'));
  * @method WikiPage#info
  * @param  {String} [key] - Information key
  * @return {Promise} - info Object contains key/value pairs of infobox data, or specific value if key given
  */
	function info(key) {
		return (0, _util.api)(apiOptions, {
			prop: 'revisions',
			rvprop: 'content',
			rvsection: 0,
			titles: raw.title
		}).then(function (res) {
			return markupParser(JSON.stringify(res));
		}).then(function (metadata) {
			if (!key) {
				return metadata;
			}
			if (metadata.hasOwnProperty(key)) {
				return metadata[key];
			}
			if (_determiners2.default.hasOwnProperty(key)) {
				var value = _determiners2.default[key](metadata);
				if (value) {
					return value;
				}
			}
			return undefined;
		});
	}

	/**
  * Paginated backlinks from page
  * @method WikiPage#backlinks
  * @param  {Boolean} [aggregated] - return all backlinks (default is true)
  * @param  {Number} [limit] - number of backlinks per page
  * @return {Promise} - includes results [and next function for more results if not aggregated]
  */
	function backlinks() {
		var aggregated = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
		var limit = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];

		var _pagination = (0, _util.pagination)(apiOptions, {
			list: 'backlinks',
			bllimit: limit,
			bltitle: raw.title
		}, function (res) {
			return _underscore2.default.pluck(res.query.backlinks, 'title');
		});
		if (aggregated) {
			return (0, _util.aggregatePagination)(_pagination);
		}
		return _pagination;
	}

	var page = {
		raw: raw,
		html: html,
		content: content,
		summary: summary,
		images: images,
		references: references,
		links: links,
		categories: categories,
		coordinates: coordinates,
		info: info,
		backlinks: backlinks,
		rawImages: rawImages,
		mainImage: mainImage
	};

	return page;
}
//# sourceMappingURL=data:application/json;base64,